<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Website of Dmitry Kabanov</title>
    <link>https://dmitrykabanov.com/tags/programming/</link>
    <description>Recent content in programming on Website of Dmitry Kabanov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://dmitrykabanov.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>“Modern C”: Notes on preamble “Level 1 Aquaintance”</title>
      <link>https://dmitrykabanov.com/blog/2023/notes-on-preamble-level-1-modern-c/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dmitrykabanov.com/blog/2023/notes-on-preamble-level-1-modern-c/</guid>
      <description>&lt;p&gt;These are my notes taken while reading the preamble for the part
&amp;ldquo;Level 1. Aquaintance&amp;rdquo;
from the book &amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt.
This preamble introduces stylistic decisions that
the author uses in the rest of the book.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>“Modern C”: Notes on chapter 2 “The principal structure of a program”</title>
      <link>https://dmitrykabanov.com/blog/2023/notes-on-chapter-02-modern-c/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dmitrykabanov.com/blog/2023/notes-on-chapter-02-modern-c/</guid>
      <description>&lt;p&gt;These are my notes taken while reading chapter 2
&amp;ldquo;The principal structure of a program&amp;rdquo;
from the book &amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt.
This chapter explains details of C grammar, distinction between declaration
and definition of objects, and statements.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>“Modern C”: Notes on chapter 1 “Getting started”</title>
      <link>https://dmitrykabanov.com/blog/2023/notes-on-ch01-modern-c/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dmitrykabanov.com/blog/2023/notes-on-ch01-modern-c/</guid>
      <description>&lt;p&gt;These are my notes taken while reading chapter 1 &amp;ldquo;Getting Started&amp;rdquo;
from the book &amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt.
This chapter introduces imperative programming and teaches how to compile
and run a C program.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>“Modern C”: Notes on the book by Jens Gustedt</title>
      <link>https://dmitrykabanov.com/blog/2023/notes-on-modern-c/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dmitrykabanov.com/blog/2023/notes-on-modern-c/</guid>
      <description>&lt;p&gt;These are the table of contents for my notes taken
while reading the book &amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt,
which teaches C according to new language standards, C11 and C17.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Universal initialization in C&#43;&#43;</title>
      <link>https://dmitrykabanov.com/blog/2023/cpp-universal-initialization/</link>
      <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dmitrykabanov.com/blog/2023/cpp-universal-initialization/</guid>
      <description>For my new position, I need to improve my knowledge of the C++ programming language (which I did not use basically since 2010). So I have started reading the book Discovering Modern C++ by Peter Gottschling to get up to speed with, well, modern C++.
In this post, I would like to talk about universal initialization (a.k.a. brace-initialization) that was introduced in C++11.
The syntax for the universal initialization is the following:</description>
    </item>
    
    <item>
      <title>JavaScript: functions</title>
      <link>https://dmitrykabanov.com/blog/2023/javascript-functions/</link>
      <pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dmitrykabanov.com/blog/2023/javascript-functions/</guid>
      <description>&lt;p&gt;As any programming language, JavaScript allows to pack useful things into
functions, and it is the key to good JavaScript knowledge, to use them
efficiently.
In this post, I describe three ways that the functions can be declared
in JavaScript,
talk about visibility of variables inside the functions,
how to have optional function arguments with default values,
how to create closures (functions, bound to outer variables),
and how to use recursion.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Solving Perfect Squares problem using breadth-first search</title>
      <link>https://dmitrykabanov.com/blog/2023/solving-perfect-squares-via-bfs/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dmitrykabanov.com/blog/2023/solving-perfect-squares-via-bfs/</guid>
      <description>I was learning recently about solving problems that use breadth-first search (BFS). This is a family of computer science algorithms that traverse tree data structures &amp;ldquo;by levels&amp;rdquo;. That is, starting at the root, we process all nodes on level 1, then all nodes on level 2, etc.
One typical application of BFS is to find the shortest path between the root and the given nodes.
To implement BFS, one should use the queue data structure.</description>
    </item>
    
    <item>
      <title>Redirection of stdout and stderr to the same file</title>
      <link>https://dmitrykabanov.com/blog/2023/redirect-stdout-stderr-same-file/</link>
      <pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dmitrykabanov.com/blog/2023/redirect-stdout-stderr-same-file/</guid>
      <description>Often, when running a program in console, one needs to save all its output to a file. Very often, such a program writes both to the standard output (stdout) and to the standard error output (stderr). For example, by default, in a Python program the print function writes to stdout and the functions of the logging module to stderr. Therefore, one needs to redirect both stdout and stderr to the same file.</description>
    </item>
    
  </channel>
</rss>
