<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Website of Dmitry Kabanov</title>
    <link>https://dmitrykabanov.com/blog/</link>
    <description>Recent content in Blogs on Website of Dmitry Kabanov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dmitrykabanov.com/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Model-View-Controller architecture, part 1</title>
      <link>https://dmitrykabanov.com/blog/2024/mvc-part-1/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2024/mvc-part-1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&#34;&gt;Model-View-Controller (MVC)&lt;/a&gt;&#xA;is one of the most common design patterns used to develop&#xA;applications with graphical user interfaces (GUI),&#xA;especially in object-oriented programming languages.&lt;/p&gt;&#xA;&lt;p&gt;I summarize here three initial works on MVC from 1970s and 1980s&#xA;along with my comments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>“Modern C”: Notes on chapter 7 “Functions”</title>
      <link>https://dmitrykabanov.com/blog/2024/notes-on-chapter-07-modern-c/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2024/notes-on-chapter-07-modern-c/</guid>
      <description>&lt;p&gt;These are my notes taken while reading chapter 7&#xA;&amp;ldquo;Functions&amp;rdquo;&#xA;from the book &lt;a href=&#34;https://www.manning.com/books/modern-c&#34;&gt;&amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This chapter discusses structuring C program using functions; particularly,&#xA;attention is given to recursion, that is, to the ability of C functions&#xA;to invoke themselves.&lt;/p&gt;</description>
    </item>
    <item>
      <title>“Modern C”: Notes on chapter 6 “Derived data types”</title>
      <link>https://dmitrykabanov.com/blog/2024/notes-on-chapter-06-modern-c/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2024/notes-on-chapter-06-modern-c/</guid>
      <description>&lt;p&gt;These are my notes taken while reading chapter 6&#xA;&amp;ldquo;Derived data types&amp;rdquo;&#xA;from the book &amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt.&lt;/p&gt;&#xA;&lt;p&gt;This chapter discusses objects that consist of other objects, such as arrays,&#xA;pointers, structures, and type aliases.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to avoid subtle bugs in malloc usage in C</title>
      <link>https://dmitrykabanov.com/blog/2024/how-to-avoid-subtle-bugs-in-malloc/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2024/how-to-avoid-subtle-bugs-in-malloc/</guid>
      <description>&lt;p&gt;Whenever a computer program needs to store data of the size determined only&#xA;during the runtime, then dynamic memory allocation is required.&#xA;Memory allocation happens in the &lt;em&gt;memory heap&lt;/em&gt;, and in C is commonly done&#xA;via a library function &lt;code&gt;malloc&lt;/code&gt;, which has subtle things with its usage&#xA;that I would like to discuss here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>“Modern C”: Notes on chapter 5 “Basic values and data”</title>
      <link>https://dmitrykabanov.com/blog/2023/notes-on-chapter-05-modern-c/</link>
      <pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/notes-on-chapter-05-modern-c/</guid>
      <description>&lt;p&gt;These are my notes taken while reading chapter 5&#xA;&amp;ldquo;Basic values and data&amp;rdquo;&#xA;from the book &amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt.&lt;/p&gt;&#xA;&lt;p&gt;This chapter discusses values of different objects&#xA;that are used in a C program,&#xA;and how they are represented.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Array and pointers equivalence myth</title>
      <link>https://dmitrykabanov.com/blog/2023/array-decay-to-pointer-in-c/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/array-decay-to-pointer-in-c/</guid>
      <description>&lt;p&gt;I&amp;rsquo;d like to share some knowledge about subtle thing that I have learned&#xA;recently in C.&#xA;It is related to the relations between arrays and pointers, and how they&#xA;are often treated as equivalent to each other (for example, this is how&#xA;passing an array to a function works when one of the expected arguments&#xA;is a pointer).&#xA;However, arrays and pointers are not equivalent to each other.&lt;/p&gt;</description>
    </item>
    <item>
      <title>“Modern C”: Notes on chapter 4 “Expressing computations”</title>
      <link>https://dmitrykabanov.com/blog/2023/notes-on-chapter-04-modern-c/</link>
      <pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/notes-on-chapter-04-modern-c/</guid>
      <description>&lt;p&gt;These are my notes taken while reading chapter 4&#xA;&amp;ldquo;Expressing computations&amp;rdquo;&#xA;from the book &amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt.&lt;/p&gt;&#xA;&lt;p&gt;This chapter discusses expressions, that is, computations based&#xA;on some values, such as variables and literals.&lt;/p&gt;</description>
    </item>
    <item>
      <title>“Modern C”: Notes on chapter 3 “Everything is about control”</title>
      <link>https://dmitrykabanov.com/blog/2023/notes-on-chapter-03-modern-c/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/notes-on-chapter-03-modern-c/</guid>
      <description>&lt;p&gt;These are my notes taken while reading chapter 3&#xA;&amp;ldquo;Everything is about control&amp;rdquo;&#xA;from the book &amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt.&#xA;This chapter explains five control block statements:&#xA;conditional statements with &lt;code&gt;if&lt;/code&gt;, loops with &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and &lt;code&gt;do-while&lt;/code&gt;,&#xA;and selection statements with &lt;code&gt;switch&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>“Modern C”: Notes on preamble “Level 1 Aquaintance”</title>
      <link>https://dmitrykabanov.com/blog/2023/notes-on-preamble-level-1-modern-c/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/notes-on-preamble-level-1-modern-c/</guid>
      <description>&lt;p&gt;These are my notes taken while reading the preamble for the part&#xA;&amp;ldquo;Level 1. Aquaintance&amp;rdquo;&#xA;from the book &amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt.&#xA;This preamble introduces stylistic decisions that&#xA;the author uses in the rest of the book.&lt;/p&gt;</description>
    </item>
    <item>
      <title>“Modern C”: Notes on chapter 2 “The principal structure of a program”</title>
      <link>https://dmitrykabanov.com/blog/2023/notes-on-chapter-02-modern-c/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/notes-on-chapter-02-modern-c/</guid>
      <description>&lt;p&gt;These are my notes taken while reading chapter 2&#xA;&amp;ldquo;The principal structure of a program&amp;rdquo;&#xA;from the book &amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt.&#xA;This chapter explains details of C grammar, distinction between declaration&#xA;and definition of objects, and statements.&lt;/p&gt;</description>
    </item>
    <item>
      <title>“Modern C”: Notes on chapter 1 “Getting started”</title>
      <link>https://dmitrykabanov.com/blog/2023/notes-on-ch01-modern-c/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/notes-on-ch01-modern-c/</guid>
      <description>&lt;p&gt;These are my notes taken while reading chapter 1 &amp;ldquo;Getting Started&amp;rdquo;&#xA;from the book &amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt.&#xA;This chapter introduces imperative programming and teaches how to compile&#xA;and run a C program.&lt;/p&gt;</description>
    </item>
    <item>
      <title>“Modern C”: Notes on the book by Jens Gustedt</title>
      <link>https://dmitrykabanov.com/blog/2023/notes-on-modern-c/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/notes-on-modern-c/</guid>
      <description>&lt;p&gt;These are the table of contents for my notes taken&#xA;while reading the book &amp;ldquo;Modern C&amp;rdquo; by Jens Gustedt,&#xA;which teaches C according to new language standards, C11 and C17.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Universal initialization in C&#43;&#43;</title>
      <link>https://dmitrykabanov.com/blog/2023/cpp-universal-initialization/</link>
      <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/cpp-universal-initialization/</guid>
      <description>&lt;p&gt;For my new position, I need to improve my knowledge of the C++ programming&#xA;language (which I did not use basically since 2010).&#xA;So I have started reading the book&#xA;&lt;a href=&#34;https://www.informit.com/store/discovering-modern-c-plus-plus-9780136677642&#34;&gt;Discovering Modern C++&lt;/a&gt;&#xA;by Peter Gottschling to get up to speed with, well, modern C++.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to use x86_64 packages in Conda on M1 Mac</title>
      <link>https://dmitrykabanov.com/blog/2023/x86_64-conda-packages-on-m1-mac/</link>
      <pubDate>Mon, 05 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/x86_64-conda-packages-on-m1-mac/</guid>
      <description>&lt;p&gt;If you work on an M1 Mac computer (that is, on an Apple computer with&#xA;an ARM processor)&#xA;and use &lt;a href=&#34;https://docs.conda.io/en/latest/&#34;&gt;Conda&lt;/a&gt;&#xA;to manage Python environments and packages,&#xA;sometimes you need to work with packages that are available&#xA;only for &lt;code&gt;x86_64&lt;/code&gt; architecture, that is, for Macs with Intel processors&#xA;(&lt;code&gt;x86_64&lt;/code&gt; is a common name for 64-bit Intel processors).&#xA;For example, I ran into this problem when I wanted to go through&#xA;&lt;a href=&#34;https://snakemake.readthedocs.io/en/stable/tutorial/setup.html&#34;&gt;SnakeMake tutorial&lt;/a&gt;,&#xA;and it turned out that many bioinformatics tools (needed for the tutorial)&#xA;are not available for the M1 architecture.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript: functions</title>
      <link>https://dmitrykabanov.com/blog/2023/javascript-functions/</link>
      <pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/javascript-functions/</guid>
      <description>&lt;p&gt;As any programming language, JavaScript allows to pack useful things into&#xA;functions, and it is the key to good JavaScript knowledge, to use them&#xA;efficiently.&#xA;In this post, I describe three ways that the functions can be declared&#xA;in JavaScript,&#xA;talk about visibility of variables inside the functions,&#xA;how to have optional function arguments with default values,&#xA;how to create closures (functions, bound to outer variables),&#xA;and how to use recursion.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to mirror GitLab repo to GitHub</title>
      <link>https://dmitrykabanov.com/blog/2023/how-to-mirror-gitlab-repo-to-github/</link>
      <pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/how-to-mirror-gitlab-repo-to-github/</guid>
      <description>&lt;p&gt;If you have a &lt;a href=&#34;https://gitlab.com&#34;&gt;GitLab&lt;/a&gt; repo and would like to mirror it in your &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt; account,&#xA;it can be set up directly in the GitLab repo settings.&#xA;Note that here we use new fine-grained tokens functionality of GitHub&#xA;(which is currently in beta, as of May 2023).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving Perfect Squares problem using breadth-first search</title>
      <link>https://dmitrykabanov.com/blog/2023/solving-perfect-squares-via-bfs/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/solving-perfect-squares-via-bfs/</guid>
      <description>&lt;p&gt;I was learning recently about solving problems that use&#xA;breadth-first search (BFS).&#xA;This is a family of computer science algorithms that traverse&#xA;tree data structures &amp;ldquo;by levels&amp;rdquo;.&#xA;That is, starting at the root, we process all nodes on level 1,&#xA;then all nodes on level 2, etc.&lt;/p&gt;&#xA;&lt;p&gt;One typical application of BFS is to find the shortest path between&#xA;the root and the given nodes.&lt;/p&gt;&#xA;&lt;p&gt;To implement BFS, one should use the queue data structure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to reencode H.264 videos to H.265</title>
      <link>https://dmitrykabanov.com/blog/2023/reencode-h.264-to-h/</link>
      <pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/reencode-h.264-to-h/</guid>
      <description>&lt;p&gt;I had videos in H.264 codec that I wanted to reencode to H.265.&#xA;The reason is that H.265 (a.k.a. High Efficiency Video Codec, HEVC) is a more&#xA;modern and efficient format than H.264 (a.k.a. Advanced Video Codec, AVC),&#xA;which allows to keep the same quality with about twice less storage.&lt;/p&gt;&#xA;&lt;p&gt;As I make from time to time&#xA;&lt;a href=&#34;https://www.youtube.com/@dmitry-kabanov&#34;&gt;YouTube&lt;/a&gt;,&#xA;&lt;a href=&#34;https://www.instagram.com/dmitry.i.kabanov/&#34;&gt;Instagram&lt;/a&gt;, and&#xA;&lt;a href=&#34;https://www.tiktok.com/@dmitry.i.kabanov&#34;&gt;TikTok&lt;/a&gt;&#xA;videos, which&#xA;I need to backup, it is always good to store your data in the most&#xA;storage-efficient format.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redirection of stdout and stderr to the same file</title>
      <link>https://dmitrykabanov.com/blog/2023/redirect-stdout-stderr-same-file/</link>
      <pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2023/redirect-stdout-stderr-same-file/</guid>
      <description>&lt;p&gt;Often, when running a program in console, one needs to save all its output&#xA;to a file.&#xA;Very often, such a program writes both to the standard output (&lt;code&gt;stdout&lt;/code&gt;)&#xA;and to the standard error output (&lt;code&gt;stderr&lt;/code&gt;).&#xA;For example, by default, in a Python program the &lt;code&gt;print&lt;/code&gt; function writes to&#xA;&lt;code&gt;stdout&lt;/code&gt; and the functions of the &lt;code&gt;logging&lt;/code&gt; module to &lt;code&gt;stderr&lt;/code&gt;.&#xA;Therefore, one needs to &lt;strong&gt;redirect both &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;&lt;/strong&gt; to the same file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Get list of open files on external volume in macOS</title>
      <link>https://dmitrykabanov.com/blog/2022/get-list-of-open-files-macos/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2022/get-list-of-open-files-macos/</guid>
      <description>&lt;p&gt;Sometimes, when you try to eject an external volume (logical part of a disk),&#xA;macOS fails to do this as some files are still open.&#xA;Frequently, it is clear what files are open by which program and can be closed.&#xA;However, not always so.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javascript: control flow</title>
      <link>https://dmitrykabanov.com/blog/2022/javascript-control-flow/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2022/javascript-control-flow/</guid>
      <description>&lt;p&gt;Here we discuss syntax constructions in JavaScript that control the flow&#xA;of program execution such as conditions for branching and loops to repeat&#xA;some part of the execution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javascript: expressions and variables</title>
      <link>https://dmitrykabanov.com/blog/2022/javascript-expressions-and-variables/</link>
      <pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2022/javascript-expressions-and-variables/</guid>
      <description>&lt;p&gt;I was recently studying Javascript out of curiousity as this language is used&#xA;so much in the current web and mobile development.&#xA;These are notes on basic Javascript knowledge to better memorize its syntax.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to quickly insert a figure in LyX</title>
      <link>https://dmitrykabanov.com/blog/2021/howto-quickly-insert-figure-in-lyx/</link>
      <pubDate>Sat, 03 Jul 2021 19:36:00 +0200</pubDate>
      <guid>https://dmitrykabanov.com/blog/2021/howto-quickly-insert-figure-in-lyx/</guid>
      <description>&lt;p&gt;I will show one of the user-defined commands that I use in&#xA;&lt;a href=&#34;https://lyx.org&#34;&gt;Lyx&lt;/a&gt;, a \(\LaTeX\) frontend, to quickly insert figures with&#xA;captions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Need for software testing</title>
      <link>https://dmitrykabanov.com/blog/2021/need-for-software-testing/</link>
      <pubDate>Mon, 28 Jun 2021 10:49:00 +0200</pubDate>
      <guid>https://dmitrykabanov.com/blog/2021/need-for-software-testing/</guid>
      <description>&lt;p&gt;This post discusses how lack of tests can make it difficult to progress&#xA;in a software project.&#xA;This happens as at later stages it can become difficult to use components&#xA;developed earlier if these components are unreliable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Books on writing science</title>
      <link>https://dmitrykabanov.com/blog/2021/books-on-writing-science/</link>
      <pubDate>Sat, 15 May 2021 12:16:00 +0200</pubDate>
      <guid>https://dmitrykabanov.com/blog/2021/books-on-writing-science/</guid>
      <description>&lt;p&gt;To be successful in academia, it is very important to have a good skill in&#xA;writing and to write often and productively.&#xA;Because the good skill in writing is rarely taught, one should learn it from&#xA;reading books on the topic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Basic terms in the probability theory</title>
      <link>https://dmitrykabanov.com/blog/2021/basic-terms-probability-theory/</link>
      <pubDate>Sat, 24 Apr 2021 18:54:00 +0200</pubDate>
      <guid>https://dmitrykabanov.com/blog/2021/basic-terms-probability-theory/</guid>
      <description>&lt;p&gt;Basic terms in probability theory are outcomes, sample space, events, and&#xA;probability measure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Colaborate in Latex: Overleaf and local git</title>
      <link>https://dmitrykabanov.com/blog/2021/collaborate-overleaf-git/</link>
      <pubDate>Fri, 19 Feb 2021 21:55:00 +0100</pubDate>
      <guid>https://dmitrykabanov.com/blog/2021/collaborate-overleaf-git/</guid>
      <description>&lt;p&gt;When you write a paper in \(\LaTeX\) and your collaborators prefer to use &lt;a href=&#34;https://www.overleaf.com&#34;&gt;Overleaf&lt;/a&gt;&#xA;but you prefer to use local setup, then you can do it with the help of the &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&#xA;version control system&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to handle python job cancelation in Slurm job manager</title>
      <link>https://dmitrykabanov.com/blog/2020/04-job-cancelation-in-slurm/</link>
      <pubDate>Sat, 19 Dec 2020 23:01:00 +0100</pubDate>
      <guid>https://dmitrykabanov.com/blog/2020/04-job-cancelation-in-slurm/</guid>
      <description>&lt;p&gt;This post discusses usage of the &lt;code&gt;signal&lt;/code&gt; Python package to process signals&#xA;that Slurm sends to inform the running job that the time is expiring.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Saving state for tf.function-decorated functions</title>
      <link>https://dmitrykabanov.com/blog/2020/03-saving-state-tf-function/</link>
      <pubDate>Fri, 31 Jul 2020 12:19:00 +0200</pubDate>
      <guid>https://dmitrykabanov.com/blog/2020/03-saving-state-tf-function/</guid>
      <description>&lt;p&gt;When you decorate a function with `tf.function` decorator, sometimes you need&#xA;to keep state between invocations of this function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using `tf.function` for performance in Tensorflow 2</title>
      <link>https://dmitrykabanov.com/blog/2020/02-tf-function-performance/</link>
      <pubDate>Tue, 28 Jul 2020 13:54:00 +0200</pubDate>
      <guid>https://dmitrykabanov.com/blog/2020/02-tf-function-performance/</guid>
      <description>&lt;p&gt;Tensorflow 2 uses so called Eager mode by default.&#xA;In this mode, it is easy to define tensors interactively, for example, in&#xA;ipython and see their values.&#xA;However, in Eager mode the execution is slow, which becomes noticable during&#xA;model training.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hyperopt Basics</title>
      <link>https://dmitrykabanov.com/blog/2020/01-hyperopt-basics/</link>
      <pubDate>Thu, 12 Mar 2020 15:16:00 +0100</pubDate>
      <guid>https://dmitrykabanov.com/blog/2020/01-hyperopt-basics/</guid>
      <description>&lt;p&gt;This is an introduction to using &lt;a href=&#34;https://github.com/hyperopt/hyperopt&#34;&gt;Hyperopt library&lt;/a&gt;. I will use mostly&#xA;terminology of machine learning (ML) as this library appeared in the ML&#xA;community.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Borel σ-algebra</title>
      <link>https://dmitrykabanov.com/blog/2019/borel-sigma-algebra/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://dmitrykabanov.com/blog/2019/borel-sigma-algebra/</guid>
      <description>&lt;p&gt;When one studies probability theory, a notion of a Borel \(\sigma\)-algebra arises.&#xA;Here we will look at what this is.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
